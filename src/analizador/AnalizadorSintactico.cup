package analizador;

import models.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

parser code
{:
public static boolean automatas_generados = false;
public String id_conjunto;
public String id_expresion;
public static ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        Excepcion nuevo_error = new Excepcion("Sintáctico R", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        Excepcion nuevo_error = new Excepcion("Sintáctico NR", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    //funcion para verificar si el conjunto existe o no
    private boolean verificarExistenciaConj(String id) {
    return ManipuladorData.listaDeConjuntos.stream().anyMatch(conjunto -> conjunto.getId().equals(id));
    }

    public int ubicacionExpresionRegular(String id) {
        int pos = 0;
        Iterator<ExpresionRegular> iteradorER = ManipuladorData.listaDeExpresiones.iterator();
        while (iteradorER.hasNext()) {
            ExpresionRegular actualER = iteradorER.next();
            if (actualER.getId().equals(id)) {
                break;
            }
            pos++;
        }
        return pos;
    }

    private int ubicacionConjunto(String id) {
        int pos = 0;
        Iterator<Conjunto> iteradorConj = ManipuladorData.listaDeConjuntos.iterator();
        while (iteradorConj.hasNext()) {
            Conjunto actualConj = iteradorConj.next();
            if (actualConj.getId().equals(id)) {
                break;
            }
            pos++;
        }
        return pos;
    }
:}

terminal String MENOR_QUE,MAYOR_QUE,ADMIRACION,DIAGONAL,LLAVE_IZQUIERDA,LLAVE_DERECHA;
terminal String PORCENTAJE,PUNTO_COMA,DOS_PUNTOS,PUNTO,MENOS,COMA,INTERROGACION;
terminal String SUMA,ASTERISCO,TILDE,BARRA_VERTICAL;
terminal String RESERVADA_CONJUNTO,SALTO_LINEA,COMILLAS, COMILLA_SIMPLE,COMILLA_DOBLE;
terminal String NUMERO,NUMERO_DECIMAL,LETRA,IDENTIFICADOR,CARACTER_ESPECIAL, CARACTER, CADENA;


non terminal INICIAR;
non terminal INSTRUCCIONES;
non terminal CONJUNTOS;
non terminal CONJUNTO;
non terminal NOTACION;
non terminal CONJUNTO_NUMEROS;
non terminal CONJUNTO_LETRAS;
non terminal CONJUNTO_CARACTERES_ESPECIALES;
non terminal EXPRESIONES;
non terminal EXPRESION;
non terminal DEFINICION_EXPR;
non terminal LEXEMAS;
non terminal LEXEMA;
non terminal IDENTIFICADOR_CONJUNTO;
non terminal IDENTIFICADOR_EXPRESION;
non terminal PUNTO_ER;
non terminal BARRA_VERTICAL_ER;
non terminal ASTERISCO_ER;
non terminal SUMA_ER;
non terminal INTERROGACION_ER;

start with INICIAR;

INICIAR ::= LLAVE_IZQUIERDA INSTRUCCIONES LLAVE_DERECHA;

INSTRUCCIONES ::= CONJUNTOS EXPRESIONES PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE LEXEMAS;

CONJUNTOS ::= CONJUNTO CONJUNTOS
    | CONJUNTO;

CONJUNTO ::= RESERVADA_CONJUNTO DOS_PUNTOS IDENTIFICADOR_CONJUNTO MENOS MAYOR_QUE NOTACION PUNTO_COMA
{:
    id_conjunto = "";
:}
;

IDENTIFICADOR_CONJUNTO ::= IDENTIFICADOR:a
{:
    if(!verificarExistenciaConj(a)){
        ManipuladorData.listaDeConjuntos.add(new Conjunto(a));
        id_conjunto = a;
    }
:}
;

NOTACION ::= LETRA:a TILDE LETRA:b
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
        char inicio = ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).obtenerInicio();
        char fin = b.charAt(0);
        for (int i = (int) inicio + 1; i < (int) fin + 1; i++){
            ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(Character.toString((char) i));
        }       
    :}
    |NUMERO:a TILDE NUMERO:b
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
        int inicio = Integer.parseInt(ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).obtenerInicioString());
        int fin = Integer.parseInt(b);
        for (int i = inicio + 1; i < fin + 1; i++){
            ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(Integer.toString(i));
        }       
    :}
    |CARACTER_ESPECIAL:a TILDE CARACTER_ESPECIAL:b
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
        char inicio = ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).obtenerInicio();
        char fin = b.charAt(0);
        for (int i = (int) inicio + 1; i < (int) fin + 1; i++){
            ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(Character.toString((char) i));
        }       
    :}
    |CONJUNTO_NUMEROS
    |CONJUNTO_LETRAS
    |CONJUNTO_CARACTERES_ESPECIALES
    ;

CONJUNTO_NUMEROS ::= NUMERO:a COMA CONJUNTO_NUMEROS
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    :}
    |NUMERO:a
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    :}
    ;

CONJUNTO_LETRAS ::= LETRA:a COMA CONJUNTO_LETRAS
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    :}
    |LETRA:a
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    :}
    ;

CONJUNTO_CARACTERES_ESPECIALES ::= CARACTER_ESPECIAL:a COMA CONJUNTO_CARACTERES_ESPECIALES
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    :}
    |CARACTER_ESPECIAL:a
    {:
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    :}
    ;

EXPRESIONES ::= EXPRESION EXPRESIONES
    |EXPRESION
    ;

EXPRESION ::= IDENTIFICADOR_EXPRESION MENOS MAYOR_QUE DEFINICION_EXPR PUNTO_COMA:a
{:
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerArbolER().idAceptacion();
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerArbolER().operaciones();
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerTabS();
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearTabST();
    try{
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerArbolER().obtenerGraficaTree(ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).getNumero());
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearGraficoTablaSiguientes();
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearGraficaTablaEstados();
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearGraficoAutomataFinito();
        automatas_generados = true;

    }catch (IOException e){
         e.printStackTrace();
    }
:}
;

IDENTIFICADOR_EXPRESION ::= IDENTIFICADOR:a 
{:
    id_expresion = a;
    ManipuladorData.listaDeExpresiones.add(new ExpresionRegular(a,""+ManipuladorData.conteo_Expresiones+ManipuladorData.conteoAnalisis));
    ManipuladorData.conteo_Expresiones += 1;
:};

DEFINICION_EXPR ::= PUNTO_ER DEFINICION_EXPR DEFINICION_EXPR
    | BARRA_VERTICAL_ER DEFINICION_EXPR DEFINICION_EXPR
    | ASTERISCO_ER DEFINICION_EXPR
    | SUMA_ER DEFINICION_EXPR
    | INTERROGACION_ER DEFINICION_EXPR
    | CARACTER:a
    {:
        String no_comillas = a.replace("\"","");
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("valor", no_comillas);
    :}
    | LLAVE_IZQUIERDA IDENTIFICADOR:a LLAVE_DERECHA
    {:
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("valor", a);
    :}
    ;

PUNTO_ER ::= PUNTO:a
{:
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("operacion", a);
:}
;

BARRA_VERTICAL_ER ::= BARRA_VERTICAL:a
{:
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("operacion", a);
:}
;

ASTERISCO_ER ::= ASTERISCO:a
{:
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("cerradura", a);
:}
;

SUMA_ER ::= SUMA:a
{:
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("cerradura", a);
:}
;

INTERROGACION_ER ::= INTERROGACION:a
{:
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("cerradura", a);
:}
;

LEXEMAS ::= LEXEMA LEXEMAS
    |LEXEMA;

LEXEMA ::= IDENTIFICADOR DOS_PUNTOS CADENA:a PUNTO_COMA
    {:
        ManipuladorData.listaDeExpresiones.forEach(er -> {
            String palabra = a.replace("\"","");
            ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(er.getId())).cadenaInsertar(palabra);
        });
    :}
    ;