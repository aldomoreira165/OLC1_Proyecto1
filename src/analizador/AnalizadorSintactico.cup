package analizador;

import models.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Iterator;

parser code
{:
public String id_conjunto;
public String id_expresion;
public static ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error sintáctico recuperable en la linea "+ (s.left+1) + " Columna " + (s.right+1) + ". Token: " + s.value);
        Excepcion nuevo_error = new Excepcion("Sintáctico R", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("Error sintáctico no recuperable en la linea "+ (s.left+1) + " Columna " + (s.right+1) + ". Token: " + s.value);
        Excepcion nuevo_error = new Excepcion("Sintáctico NR", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    //funcion para verificar si el conjunto existe o no
    //!MODIFICAAAAAAAAAAAAAAAAAAAAAAAAAAAAR!
    private boolean existeConj(String id) {
        Iterator<classConj> iteradorConj = ManipuladorData.listConj.iterator();
        while (iteradorConj.hasNext()) {
            classConj actualConj = iteradorConj.next();
            if (actualConj.getId().equals(id)) {
                return true;
            }
        }
        return false;
    }

    public int posER(String id) {
        int pos = 0;
        Iterator<classER> iteradorER = ManipuladorData.listER.iterator();
        while (iteradorER.hasNext()) {
            classER actualER = iteradorER.next();
            if (actualER.getId().equals(id)) {
                break;
            }
            pos++;
        }
        return pos;
    }
:}

terminal MENOR_QUE,MAYOR_QUE,ADMIRACION,DIAGONAL,LLAVE_IZQUIERDA,LLAVE_DERECHA;
terminal PORCENTAJE,PUNTO_COMA,DOS_PUNTOS,PUNTO,MENOS,COMA,INTERROGACION;
terminal SUMA,ASTERISCO,TILDE,BARRA_VERTICAL, NUMERAL, DOLAR, AMPERSON, IGUAL, ARROBA, POTENCIA, GUION_BAJO;
terminal RESERVADA_CONJUNTO,COMILLA_SIMPLE,COMILLA_DOBLE;
terminal String NUMERO,NUMERO_DECIMAL,LETRA,IDENTIFICADOR;


non terminal INICIAR;
non terminal INSTRUCCIONES;
non terminal CONJUNTOS;
non terminal CONJUNTO;
non terminal NOTACION;
non terminal CONJUNTO_NUMEROS;
non terminal CONJUNTO_LETRAS;
non terminal EXPRESIONES;
non terminal EXPRESION;
non terminal DEFINICION_EXPR;
non terminal LEXEMAS;
non terminal LEXEMA;
non terminal SIMBOLO;
non terminal IDENTIFICADOR_CONJUNTO;
non terminal IDENTIFICADOR_EXPRESION;
non terminal PUNTO_ER;
non terminal BARRA_VERTICAL_ER;
non terminal ASTERISCO_ER;
non terminal SUMA_ER;
non terminal INTERROGACION_ER;

//falta
//calcular conjuntos


start with INICIAR;

INICIAR ::= LLAVE_IZQUIERDA INSTRUCCIONES LLAVE_DERECHA;

INSTRUCCIONES ::= CONJUNTOS EXPRESIONES PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE LEXEMAS;

CONJUNTOS ::= CONJUNTO CONJUNTOS
    | CONJUNTO;

CONJUNTO ::= RESERVADA_CONJUNTO DOS_PUNTOS IDENTIFICADOR_CONJUNTO MENOS MAYOR_QUE NOTACION PUNTO_COMA
{:
    id_conjunto = "";
:}
;

IDENTIFICADOR_CONJUNTO ::= IDENTIFICADOR:a
{:
    //!CAMBIARRRR!
    if(!existeConj(a)){
        ManipuladorData.listConj.add(new classConj(a));
        id_conjunto = a;
    }/*else{
        Excepcion nuevo_error = new Excepcion("Sintáctico NR","Conjunto repetido",0,0);
        erroresSintacticos.add(nuevo_error);
    }*/
:}
;

NOTACION ::= LETRA TILDE LETRA
    |NUMERO TILDE NUMERO
    |SIMBOLO TILDE SIMBOLO
    |CONJUNTO_NUMEROS
    |CONJUNTO_LETRAS;

CONJUNTO_NUMEROS ::= NUMERO COMA CONJUNTO_NUMEROS
    |NUMERO;

CONJUNTO_LETRAS ::= LETRA COMA CONJUNTO_LETRAS
    |LETRA;

EXPRESIONES ::= EXPRESION EXPRESIONES
    |EXPRESION
    ;

EXPRESION ::= IDENTIFICADOR_EXPRESION MENOS MAYOR_QUE DEFINICION_EXPR PUNTO_COMA;

IDENTIFICADOR_EXPRESION ::= IDENTIFICADOR:a 
{:
    //cambiar A
    id_expresion = a;
    ManipuladorData.listER.add(new classER(a,""+ManipuladorData.conteo_Expresiones+ManipuladorData.conteoAnalisis));
    //verificar su funcionamiento ya que es static
    ManipuladorData.conteo_Expresiones += 1;
:};

DEFINICION_EXPR ::= PUNTO_ER DEFINICION_EXPR DEFINICION_EXPR
    | BARRA_VERTICAL_ER DEFINICION_EXPR DEFINICION_EXPR
    | ASTERISCO_ER DEFINICION_EXPR
    | SUMA_ER DEFINICION_EXPR
    | INTERROGACION_ER DEFINICION_EXPR
    | COMILLA_DOBLE NUMERO:a COMILLA_DOBLE
    {:
        ManipuladorData.listER.get(posER(id_expresion)).insertNodo("valor", a);
        System.out.println(a);
    :}
    | LLAVE_IZQUIERDA IDENTIFICADOR:a LLAVE_DERECHA
    {:
        ManipuladorData.listER.get(posER(id_expresion)).insertNodo("valor", a);
        System.out.println(a);
    :}
    ;

PUNTO_ER ::= PUNTO:a
{:
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("operacion", ".");
    System.out.println(a);
:}
;

BARRA_VERTICAL_ER ::= BARRA_VERTICAL:a
{:
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("operacion", "|");
    System.out.println(a);
:}
;

ASTERISCO_ER ::= ASTERISCO:a
{:
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("cerradura", "*");
    System.out.println(a);
:}
;

SUMA_ER ::= SUMA:a
{:
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("cerradura", "+");
    System.out.println(a);
:}
;

INTERROGACION_ER ::= INTERROGACION:a
{:
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("cerradura", "?");
    System.out.println(a);
:}
;



LEXEMAS ::= LEXEMA LEXEMAS
    |LEXEMA;

LEXEMA ::= IDENTIFICADOR DOS_PUNTOS COMILLA_DOBLE IDENTIFICADOR COMILLA_DOBLE PUNTO_COMA
    |IDENTIFICADOR DOS_PUNTOS COMILLA_DOBLE NUMERO COMILLA_DOBLE PUNTO_COMA
    |IDENTIFICADOR DOS_PUNTOS COMILLA_DOBLE NUMERO_DECIMAL COMILLA_DOBLE PUNTO_COMA
    ;

SIMBOLO ::= MENOR_QUE
    |MAYOR_QUE
    |ADMIRACION
    |DIAGONAL
    |LLAVE_IZQUIERDA
    |LLAVE_DERECHA
    |PORCENTAJE
    |PUNTO_COMA
    |DOS_PUNTOS
    |PUNTO
    |MENOS
    |COMA
    |INTERROGACION
    |SUMA
    |ASTERISCO
    |TILDE
    |BARRA_VERTICAL
    |NUMERAL
    |DOLAR
    |AMPERSON
    |IGUAL
    |ARROBA
    |POTENCIA
    |COMILLA_SIMPLE
    |COMILLA_DOBLE
    |GUION_BAJO;