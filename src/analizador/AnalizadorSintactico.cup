package analizador;
import models.Excepcion;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:
public static ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();
public ArrayList<String> expresiones = new ArrayList<String>();

    public void syntax_error(Symbol s){
        //System.out.println("Error sint치ctico recuperable en la linea "+ (s.left+1) + " Columna " + (s.right+1) + ". Token: " + s.value);
        Excepcion nuevo_error = new Excepcion("Sint치ctico R", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("Error sint치ctico no recuperable en la linea "+ (s.left+1) + " Columna " + (s.right+1) + ". Token: " + s.value);
        Excepcion nuevo_error = new Excepcion("Sint치ctico NR", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }
:}

terminal MENOR_QUE,MAYOR_QUE,ADMIRACION,DIAGONAL,LLAVE_IZQUIERDA,LLAVE_DERECHA;
terminal PORCENTAJE,PUNTO_COMA,DOS_PUNTOS,PUNTO,MENOS,COMA,INTERROGACION;
terminal SUMA,ASTERISCO,TILDE,BARRA_VERTICAL, NUMERAL, DOLAR, AMPERSON, IGUAL, ARROBA, POTENCIA, GUION_BAJO;
terminal RESERVADA_CONJUNTO,COMILLA_SIMPLE,COMILLA_DOBLE;
terminal String NUMERO,NUMERO_DECIMAL,LETRA,IDENTIFICADOR;


non terminal INICIAR; 
non terminal BLOQUE_EXPRESIONES; 
non terminal CONJUNTO_AREA_EXPRESIONES; 
non terminal CONJUNTO_AREA_LEXEMA; 
non terminal NOTACION; 
non terminal SIMBOLO; 
non terminal CONJUNTO_NUMEROS; 
non terminal CONJUNTO_LETRAS; 
non terminal CAMBIO_SECCION; 
non terminal BLOQUE_LEXEMA; 
non terminal DET_LEXEMA; 
non terminal DEF_EXPR;
non terminal DEFINICION_EXPR;
non terminal CONTENIDO_COMILLA;
non terminal CIERRE_ER;
non terminal FINALIZAR;

start with INICIAR;

INICIAR ::= LLAVE_IZQUIERDA BLOQUE_EXPRESIONES;

CONJUNTO_AREA_EXPRESIONES ::= RESERVADA_CONJUNTO DOS_PUNTOS IDENTIFICADOR MENOS MAYOR_QUE NOTACION PUNTO_COMA BLOQUE_EXPRESIONES;

CONJUNTO_AREA_LEXEMA ::= RESERVADA_CONJUNTO DOS_PUNTOS IDENTIFICADOR MENOS MAYOR_QUE NOTACION PUNTO_COMA BLOQUE_LEXEMA;

NOTACION ::= LETRA TILDE LETRA
    |NUMERO TILDE NUMERO
    |SIMBOLO TILDE SIMBOLO
    |CONJUNTO_NUMEROS
    |CONJUNTO_LETRAS;

CONJUNTO_NUMEROS ::= NUMERO COMA CONJUNTO_NUMEROS
    |NUMERO;

CONJUNTO_LETRAS ::= LETRA COMA CONJUNTO_LETRAS
    |LETRA;

CAMBIO_SECCION ::= PORCENTAJE PORCENTAJE BLOQUE_LEXEMA;

BLOQUE_LEXEMA ::= IDENTIFICADOR DOS_PUNTOS DET_LEXEMA PUNTO_COMA BLOQUE_LEXEMA
    |CONJUNTO_AREA_LEXEMA
    |FINALIZAR;

DET_LEXEMA ::= COMILLA_DOBLE IDENTIFICADOR COMILLA_DOBLE
    |COMILLA_DOBLE NUMERO COMILLA_DOBLE
    |COMILLA_DOBLE NUMERO_DECIMAL COMILLA_DOBLE;

BLOQUE_EXPRESIONES ::= DEF_EXPR
    |CONJUNTO_AREA_EXPRESIONES
    |CAMBIO_SECCION;

DEF_EXPR ::= IDENTIFICADOR:a MENOS MAYOR_QUE DEFINICION_EXPR
{:
    parser.expresiones.add(a);
:}
;

DEFINICION_EXPR ::= PUNTO DEFINICION_EXPR
    |BARRA_VERTICAL DEFINICION_EXPR
    |ASTERISCO DEFINICION_EXPR
    |SUMA DEFINICION_EXPR
    |INTERROGACION DEFINICION_EXPR
    |COMILLA_DOBLE CONTENIDO_COMILLA COMILLA_DOBLE CIERRE_ER
    |LLAVE_IZQUIERDA IDENTIFICADOR LLAVE_DERECHA CIERRE_ER;


//arreglar para poner varios numeros o letras
CONTENIDO_COMILLA ::= LETRA
    |NUMERO
    |SIMBOLO;

CIERRE_ER ::= PUNTO_COMA BLOQUE_EXPRESIONES
    | DEFINICION_EXPR;

SIMBOLO ::= MENOR_QUE
    |MAYOR_QUE
    |ADMIRACION
    |DIAGONAL
    |LLAVE_IZQUIERDA
    |LLAVE_DERECHA
    |PORCENTAJE
    |PUNTO_COMA
    |DOS_PUNTOS
    |PUNTO
    |MENOS
    |COMA
    |INTERROGACION
    |SUMA
    |ASTERISCO
    |TILDE
    |BARRA_VERTICAL
    |NUMERAL
    |DOLAR
    |AMPERSON
    |IGUAL
    |ARROBA
    |POTENCIA
    |COMILLA_SIMPLE
    |COMILLA_DOBLE
    |GUION_BAJO;

FINALIZAR ::= LLAVE_DERECHA;