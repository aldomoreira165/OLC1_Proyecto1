
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import models.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\005\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\005\011" +
    "\000\002\017\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\004\000\002\012\003\000\002\013\007\000" +
    "\002\020\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\003\000\002\014\005\000\002\021\003\000\002\022\003" +
    "\000\002\023\003\000\002\024\003\000\002\025\003\000" +
    "\002\015\004\000\002\015\003\000\002\016\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\010\005\001\002\000\004\002\121\001" +
    "\002\000\004\025\006\001\002\000\004\014\065\001\002" +
    "\000\004\011\064\001\002\000\004\035\014\001\002\000" +
    "\006\025\006\035\ufffd\001\002\000\004\035\ufffe\001\002" +
    "\000\004\016\033\001\002\000\004\016\uffeb\001\002\000" +
    "\006\012\uffed\035\014\001\002\000\004\012\017\001\002" +
    "\000\004\012\020\001\002\000\004\012\021\001\002\000" +
    "\004\012\022\001\002\000\004\035\023\001\002\000\004" +
    "\014\027\001\002\000\004\011\uffff\001\002\000\006\011" +
    "\uffdd\035\023\001\002\000\004\011\uffde\001\002\000\004" +
    "\040\030\001\002\000\004\013\031\001\002\000\006\011" +
    "\uffdc\035\uffdc\001\002\000\004\012\uffee\001\002\000\004" +
    "\005\034\001\002\000\020\010\041\015\040\020\051\021" +
    "\043\022\036\024\046\037\050\001\002\000\020\010\041" +
    "\015\040\020\051\021\043\022\036\024\046\037\050\001" +
    "\002\000\020\010\uffe1\015\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\024\uffe1\037\uffe1\001\002\000\020\010\041\015\040\020" +
    "\051\021\043\022\036\024\046\037\050\001\002\000\020" +
    "\010\uffe3\015\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\037" +
    "\uffe3\001\002\000\004\035\060\001\002\000\004\013\057" +
    "\001\002\000\020\010\uffe0\015\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\024\uffe0\037\uffe0\001\002\000\020\010\041\015\040" +
    "\020\051\021\043\022\036\024\046\037\050\001\002\000" +
    "\020\010\041\015\040\020\051\021\043\022\036\024\046" +
    "\037\050\001\002\000\020\010\uffe2\015\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\024\uffe2\037\uffe2\001\002\000\020\010\041" +
    "\015\040\020\051\021\043\022\036\024\046\037\050\001" +
    "\002\000\022\010\uffe5\013\uffe5\015\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\024\uffe5\037\uffe5\001\002\000\020\010\uffdf\015" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\037\uffdf\001\002" +
    "\000\020\010\041\015\040\020\051\021\043\022\036\024" +
    "\046\037\050\001\002\000\022\010\uffea\013\uffea\015\uffea" +
    "\020\uffea\021\uffea\022\uffea\024\uffea\037\uffea\001\002\000" +
    "\020\010\041\015\040\020\051\021\043\022\036\024\046" +
    "\037\050\001\002\000\022\010\uffe9\013\uffe9\015\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\024\uffe9\037\uffe9\001\002\000\022" +
    "\010\uffe7\013\uffe7\015\uffe7\020\uffe7\021\uffe7\022\uffe7\024" +
    "\uffe7\037\uffe7\001\002\000\006\012\uffec\035\uffec\001\002" +
    "\000\004\011\061\001\002\000\022\010\uffe4\013\uffe4\015" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\037\uffe4\001\002" +
    "\000\022\010\uffe8\013\uffe8\015\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\024\uffe8\037\uffe8\001\002\000\022\010\uffe6\013\uffe6" +
    "\015\uffe6\020\uffe6\021\uffe6\022\uffe6\024\uffe6\037\uffe6\001" +
    "\002\000\004\002\000\001\002\000\004\035\066\001\002" +
    "\000\004\016\ufffb\001\002\000\004\016\070\001\002\000" +
    "\004\005\071\001\002\000\010\032\073\034\072\036\075" +
    "\001\002\000\010\013\ufff1\017\114\023\115\001\002\000" +
    "\010\013\ufff3\017\107\023\110\001\002\000\004\013\106" +
    "\001\002\000\010\013\uffef\017\101\023\102\001\002\000" +
    "\004\013\ufff7\001\002\000\004\013\ufff6\001\002\000\004" +
    "\013\ufff5\001\002\000\004\036\104\001\002\000\004\036" +
    "\103\001\002\000\004\013\ufff8\001\002\000\006\013\uffef" +
    "\017\101\001\002\000\004\013\ufff0\001\002\000\006\025" +
    "\ufffc\035\ufffc\001\002\000\004\032\112\001\002\000\004" +
    "\032\111\001\002\000\004\013\ufff9\001\002\000\006\013" +
    "\ufff3\017\107\001\002\000\004\013\ufff4\001\002\000\004" +
    "\034\117\001\002\000\004\034\116\001\002\000\004\013" +
    "\ufffa\001\002\000\006\013\ufff1\017\114\001\002\000\004" +
    "\013\ufff2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\006\004\007\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\015\013\014\020\012\001" +
    "\001\000\006\004\011\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\031\013" +
    "\014\020\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\023\016" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\025\016\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\014\041\021\046\022\044\023" +
    "\036\024\043\025\034\001\001\000\016\014\062\021\046" +
    "\022\044\023\036\024\043\025\034\001\001\000\002\001" +
    "\001\000\016\014\061\021\046\022\044\023\036\024\043" +
    "\025\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\055\021\046" +
    "\022\044\023\036\024\043\025\034\001\001\000\016\014" +
    "\053\021\046\022\044\023\036\024\043\025\034\001\001" +
    "\000\002\001\001\000\016\014\051\021\046\022\044\023" +
    "\036\024\043\025\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\052\021\046\022\044\023\036\024" +
    "\043\025\034\001\001\000\002\001\001\000\016\014\054" +
    "\021\046\022\044\023\036\024\043\025\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\073\007\075\010\076\011\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static boolean automatas_generados = false;
public String id_conjunto;
public String id_expresion;
public static ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        Excepcion nuevo_error = new Excepcion("Sintáctico R", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        Excepcion nuevo_error = new Excepcion("Sintáctico NR", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    //funcion para verificar si el conjunto existe o no
    private boolean verificarExistenciaConj(String id) {
    return ManipuladorData.listaDeConjuntos.stream().anyMatch(conjunto -> conjunto.getId().equals(id));
    }

    public int ubicacionExpresionRegular(String id) {
        int pos = 0;
        Iterator<ExpresionRegular> iteradorER = ManipuladorData.listaDeExpresiones.iterator();
        while (iteradorER.hasNext()) {
            ExpresionRegular actualER = iteradorER.next();
            if (actualER.getId().equals(id)) {
                break;
            }
            pos++;
        }
        return pos;
    }

    private int ubicacionConjunto(String id) {
        int pos = 0;
        Iterator<Conjunto> iteradorConj = ManipuladorData.listaDeConjuntos.iterator();
        while (iteradorConj.hasNext()) {
            Conjunto actualConj = iteradorConj.next();
            if (actualConj.getId().equals(id)) {
                break;
            }
            pos++;
        }
        return pos;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAR ::= LLAVE_IZQUIERDA INSTRUCCIONES LLAVE_DERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAR",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= CONJUNTOS EXPRESIONES PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE LEXEMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONJUNTOS ::= CONJUNTO CONJUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONJUNTOS ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONJUNTO ::= RESERVADA_CONJUNTO DOS_PUNTOS IDENTIFICADOR_CONJUNTO MENOS MAYOR_QUE NOTACION PUNTO_COMA 
            {
              Object RESULT =null;
		
    id_conjunto = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_CONJUNTO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if(!verificarExistenciaConj(a)){
        ManipuladorData.listaDeConjuntos.add(new Conjunto(a));
        id_conjunto = a;
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CONJUNTO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NOTACION ::= LETRA TILDE LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
        char inicio = ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).obtenerInicio();
        char fin = b.charAt(0);
        for (int i = (int) inicio + 1; i < (int) fin + 1; i++){
            ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(Character.toString((char) i));
        }       
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NOTACION ::= NUMERO TILDE NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
        int inicio = Integer.parseInt(ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).obtenerInicioString());
        int fin = Integer.parseInt(b);
        for (int i = inicio + 1; i < fin + 1; i++){
            ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(Integer.toString(i));
        }       
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NOTACION ::= CARACTER_ESPECIAL TILDE CARACTER_ESPECIAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
        char inicio = ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).obtenerInicio();
        char fin = b.charAt(0);
        for (int i = (int) inicio + 1; i < (int) fin + 1; i++){
            ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(Character.toString((char) i));
        }       
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOTACION ::= CONJUNTO_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOTACION ::= CONJUNTO_LETRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NOTACION ::= CONJUNTO_CARACTERES_ESPECIALES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONJUNTO_NUMEROS ::= NUMERO COMA CONJUNTO_NUMEROS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_NUMEROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTO_NUMEROS ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_NUMEROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONJUNTO_LETRAS ::= LETRA COMA CONJUNTO_LETRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_LETRAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONJUNTO_LETRAS ::= LETRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_LETRAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONJUNTO_CARACTERES_ESPECIALES ::= CARACTER_ESPECIAL COMA CONJUNTO_CARACTERES_ESPECIALES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_CARACTERES_ESPECIALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONJUNTO_CARACTERES_ESPECIALES ::= CARACTER_ESPECIAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        ManipuladorData.listaDeConjuntos.get(ubicacionConjunto(id_conjunto)).getElementos().add(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_CARACTERES_ESPECIALES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESIONES ::= EXPRESION EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= IDENTIFICADOR_EXPRESION MENOS MAYOR_QUE DEFINICION_EXPR PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerArbolER().idAceptacion();
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerArbolER().operaciones();
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerTabS();
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearTabST();
    try{
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).obtenerArbolER().obtenerGraficaTree(ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).getNumero());
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearGraficoTablaSiguientes();
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearGraficaTablaEstados();
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).crearGraficoAutomataFinito();
        automatas_generados = true;

    }catch (IOException e){
         e.printStackTrace();
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IDENTIFICADOR_EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    id_expresion = a;
    ManipuladorData.listaDeExpresiones.add(new ExpresionRegular(a,""+ManipuladorData.conteo_Expresiones+ManipuladorData.conteoAnalisis));
    ManipuladorData.conteo_Expresiones += 1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFINICION_EXPR ::= PUNTO_ER DEFINICION_EXPR DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFINICION_EXPR ::= BARRA_VERTICAL_ER DEFINICION_EXPR DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFINICION_EXPR ::= ASTERISCO_ER DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFINICION_EXPR ::= SUMA_ER DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFINICION_EXPR ::= INTERROGACION_ER DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFINICION_EXPR ::= CARACTER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String no_comillas = a.replace("\"","");
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("valor", no_comillas);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFINICION_EXPR ::= LLAVE_IZQUIERDA IDENTIFICADOR LLAVE_DERECHA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("valor", a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PUNTO_ER ::= PUNTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("operacion", a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTO_ER",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BARRA_VERTICAL_ER ::= BARRA_VERTICAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("operacion", a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BARRA_VERTICAL_ER",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASTERISCO_ER ::= ASTERISCO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("cerradura", a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASTERISCO_ER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUMA_ER ::= SUMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("cerradura", a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUMA_ER",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INTERROGACION_ER ::= INTERROGACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(id_expresion)).nodoInsertar("cerradura", a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERROGACION_ER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LEXEMAS ::= LEXEMA LEXEMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LEXEMAS ::= LEXEMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMAS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LEXEMA ::= IDENTIFICADOR DOS_PUNTOS CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ManipuladorData.listaDeExpresiones.forEach(er -> {
            String palabra = a.replace("\"","");
            ManipuladorData.listaDeExpresiones.get(ubicacionExpresionRegular(er.getId())).cadenaInsertar(palabra);
        });
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
