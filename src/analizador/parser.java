
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import models.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Iterator;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\005\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\005\011" +
    "\000\002\017\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\003\000\002\006\003\000\002" +
    "\007\005\000\002\007\003\000\002\010\005\000\002\010" +
    "\003\000\002\011\004\000\002\011\003\000\002\012\007" +
    "\000\002\020\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\005\000\002\013\005\000\002\021\003\000\002\022" +
    "\003\000\002\023\003\000\002\024\003\000\002\025\003" +
    "\000\002\014\004\000\002\014\003\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\010\005\001\002\000\004\002\161\001" +
    "\002\000\004\034\006\001\002\000\004\014\077\001\002" +
    "\000\004\011\076\001\002\000\004\042\014\001\002\000" +
    "\006\034\006\042\ufffd\001\002\000\004\042\ufffe\001\002" +
    "\000\004\016\043\001\002\000\004\016\uffee\001\002\000" +
    "\006\012\ufff0\042\014\001\002\000\004\012\017\001\002" +
    "\000\004\012\020\001\002\000\004\012\021\001\002\000" +
    "\004\012\022\001\002\000\004\042\023\001\002\000\004" +
    "\014\027\001\002\000\004\011\uffff\001\002\000\006\011" +
    "\uffe0\042\023\001\002\000\004\011\uffe1\001\002\000\004" +
    "\036\030\001\002\000\010\037\031\040\032\042\033\001" +
    "\002\000\004\036\040\001\002\000\004\036\036\001\002" +
    "\000\004\036\034\001\002\000\004\013\035\001\002\000" +
    "\006\011\uffdf\042\uffdf\001\002\000\004\013\037\001\002" +
    "\000\006\011\uffdd\042\uffdd\001\002\000\004\013\041\001" +
    "\002\000\006\011\uffde\042\uffde\001\002\000\004\012\ufff1" +
    "\001\002\000\004\005\044\001\002\000\020\010\051\015" +
    "\050\020\061\021\053\022\046\024\057\036\054\001\002" +
    "\000\020\010\051\015\050\020\061\021\053\022\046\024" +
    "\057\036\054\001\002\000\020\010\uffe4\015\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\024\uffe4\036\uffe4\001\002\000\020\010" +
    "\051\015\050\020\061\021\053\022\046\024\057\036\054" +
    "\001\002\000\020\010\uffe6\015\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\024\uffe6\036\uffe6\001\002\000\004\042\072\001\002" +
    "\000\004\013\071\001\002\000\020\010\uffe3\015\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\024\uffe3\036\uffe3\001\002\000\004" +
    "\037\067\001\002\000\020\010\051\015\050\020\061\021" +
    "\053\022\046\024\057\036\054\001\002\000\020\010\051" +
    "\015\050\020\061\021\053\022\046\024\057\036\054\001" +
    "\002\000\020\010\uffe5\015\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\036\uffe5\001\002\000\020\010\051\015\050\020" +
    "\061\021\053\022\046\024\057\036\054\001\002\000\020" +
    "\010\uffe2\015\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\036" +
    "\uffe2\001\002\000\020\010\051\015\050\020\061\021\053" +
    "\022\046\024\057\036\054\001\002\000\022\010\uffed\013" +
    "\uffed\015\uffed\020\uffed\021\uffed\022\uffed\024\uffed\036\uffed" +
    "\001\002\000\020\010\051\015\050\020\061\021\053\022" +
    "\046\024\057\036\054\001\002\000\022\010\uffec\013\uffec" +
    "\015\uffec\020\uffec\021\uffec\022\uffec\024\uffec\036\uffec\001" +
    "\002\000\022\010\uffea\013\uffea\015\uffea\020\uffea\021\uffea" +
    "\022\uffea\024\uffea\036\uffea\001\002\000\004\036\070\001" +
    "\002\000\022\010\uffe8\013\uffe8\015\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\024\uffe8\036\uffe8\001\002\000\006\012\uffef\042" +
    "\uffef\001\002\000\004\011\073\001\002\000\022\010\uffe7" +
    "\013\uffe7\015\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\036" +
    "\uffe7\001\002\000\022\010\uffeb\013\uffeb\015\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\024\uffeb\036\uffeb\001\002\000\022\010" +
    "\uffe9\013\uffe9\015\uffe9\020\uffe9\021\uffe9\022\uffe9\024\uffe9" +
    "\036\uffe9\001\002\000\004\002\000\001\002\000\004\042" +
    "\100\001\002\000\004\016\ufffb\001\002\000\004\016\102" +
    "\001\002\000\004\005\103\001\002\000\072\004\124\005" +
    "\116\006\132\007\135\010\126\011\137\012\122\013\136" +
    "\014\121\015\107\016\105\017\123\020\106\021\114\022" +
    "\127\023\117\024\140\025\142\026\112\027\130\030\111" +
    "\031\141\032\115\033\110\035\104\036\125\037\133\041" +
    "\113\001\002\000\006\013\uffc5\023\uffc5\001\002\000\006" +
    "\013\uffd2\023\uffd2\001\002\000\006\013\uffd0\023\uffd0\001" +
    "\002\000\006\013\uffd3\023\uffd3\001\002\000\006\013\uffc3" +
    "\023\uffc3\001\002\000\006\013\uffc8\023\uffc8\001\002\000" +
    "\006\013\uffca\023\uffca\001\002\000\010\013\ufff2\017\154" +
    "\023\155\001\002\000\006\013\uffcf\023\uffcf\001\002\000" +
    "\006\013\uffc6\023\uffc6\001\002\000\006\013\uffdb\023\uffdb" +
    "\001\002\000\006\013\uffcd\023\uffcd\001\002\000\004\013" +
    "\ufff6\001\002\000\006\013\uffd4\023\uffd4\001\002\000\006" +
    "\013\uffd6\023\uffd6\001\002\000\006\013\uffd1\023\uffd1\001" +
    "\002\000\006\013\uffdc\023\uffdc\001\002\000\006\013\uffc4" +
    "\023\uffc4\001\002\000\006\013\uffd8\023\uffd8\001\002\000" +
    "\006\013\uffce\023\uffce\001\002\000\006\013\uffc9\023\uffc9" +
    "\001\002\000\004\023\152\001\002\000\006\013\uffda\023" +
    "\uffda\001\002\000\010\013\ufff4\017\145\023\146\001\002" +
    "\000\004\013\144\001\002\000\006\013\uffd9\023\uffd9\001" +
    "\002\000\006\013\uffd5\023\uffd5\001\002\000\006\013\uffd7" +
    "\023\uffd7\001\002\000\006\013\uffcc\023\uffcc\001\002\000" +
    "\006\013\uffc7\023\uffc7\001\002\000\006\013\uffcb\023\uffcb" +
    "\001\002\000\004\013\ufff7\001\002\000\006\034\ufffc\042" +
    "\ufffc\001\002\000\004\037\150\001\002\000\004\037\147" +
    "\001\002\000\004\013\ufff9\001\002\000\006\013\ufff4\017" +
    "\145\001\002\000\004\013\ufff5\001\002\000\066\004\124" +
    "\005\116\006\132\007\135\010\126\011\137\012\122\013" +
    "\136\014\121\015\107\016\105\017\123\020\106\021\114" +
    "\022\127\023\117\024\140\025\142\026\112\027\130\030" +
    "\111\031\141\032\115\033\110\035\104\036\125\001\002" +
    "\000\004\013\ufff8\001\002\000\004\041\157\001\002\000" +
    "\004\041\156\001\002\000\004\013\ufffa\001\002\000\006" +
    "\013\ufff2\017\154\001\002\000\004\013\ufff3\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\006\004\007\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\015\012\014\020\012\001" +
    "\001\000\006\004\011\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\041\012" +
    "\014\020\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\023\015" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\025\015\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\051\021\057\022\055\023\046\024\054\025\044\001\001" +
    "\000\016\013\074\021\057\022\055\023\046\024\054\025" +
    "\044\001\001\000\002\001\001\000\016\013\073\021\057" +
    "\022\055\023\046\024\054\025\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\065\021\057\022\055\023" +
    "\046\024\054\025\044\001\001\000\016\013\063\021\057" +
    "\022\055\023\046\024\054\025\044\001\001\000\002\001" +
    "\001\000\016\013\061\021\057\022\055\023\046\024\054" +
    "\025\044\001\001\000\002\001\001\000\016\013\062\021" +
    "\057\022\055\023\046\024\054\025\044\001\001\000\002" +
    "\001\001\000\016\013\064\021\057\022\055\023\046\024" +
    "\054\025\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\133\007\142\010\117\016\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\152\001" +
    "\001\000\002\001\001\000\004\010\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public String id_conjunto;
public String id_expresion;
public static ArrayList<Excepcion> erroresSintacticos = new ArrayList<Excepcion>();

    public void syntax_error(Symbol s){
        //System.out.println("Error sintáctico recuperable en la linea "+ (s.left+1) + " Columna " + (s.right+1) + ". Token: " + s.value);
        Excepcion nuevo_error = new Excepcion("Sintáctico R", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        //System.out.println("Error sintáctico no recuperable en la linea "+ (s.left+1) + " Columna " + (s.right+1) + ". Token: " + s.value);
        Excepcion nuevo_error = new Excepcion("Sintáctico NR", (String) s.value, (s.left+1), (s.right+1));
        erroresSintacticos.add(nuevo_error);
    }

    //funcion para verificar si el conjunto existe o no
    //!MODIFICAAAAAAAAAAAAAAAAAAAAAAAAAAAAR!
    private boolean existeConj(String id) {
        Iterator<classConj> iteradorConj = ManipuladorData.listConj.iterator();
        while (iteradorConj.hasNext()) {
            classConj actualConj = iteradorConj.next();
            if (actualConj.getId().equals(id)) {
                return true;
            }
        }
        return false;
    }

    public int posER(String id) {
        int pos = 0;
        Iterator<classER> iteradorER = ManipuladorData.listER.iterator();
        while (iteradorER.hasNext()) {
            classER actualER = iteradorER.next();
            if (actualER.getId().equals(id)) {
                break;
            }
            pos++;
        }
        return pos;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIAR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIAR ::= LLAVE_IZQUIERDA INSTRUCCIONES LLAVE_DERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIAR",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= CONJUNTOS EXPRESIONES PORCENTAJE PORCENTAJE PORCENTAJE PORCENTAJE LEXEMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONJUNTOS ::= CONJUNTO CONJUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONJUNTOS ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTOS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONJUNTO ::= RESERVADA_CONJUNTO DOS_PUNTOS IDENTIFICADOR_CONJUNTO MENOS MAYOR_QUE NOTACION PUNTO_COMA 
            {
              Object RESULT =null;
		
    id_conjunto = "";

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IDENTIFICADOR_CONJUNTO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //!CAMBIARRRR!
    if(!existeConj(a)){
        ManipuladorData.listConj.add(new classConj(a));
        id_conjunto = a;
    }/*else{
        Excepcion nuevo_error = new Excepcion("Sintáctico NR","Conjunto repetido",0,0);
        erroresSintacticos.add(nuevo_error);
    }*/

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_CONJUNTO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NOTACION ::= LETRA TILDE LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NOTACION ::= NUMERO TILDE NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NOTACION ::= SIMBOLO TILDE SIMBOLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOTACION ::= CONJUNTO_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOTACION ::= CONJUNTO_LETRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NOTACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONJUNTO_NUMEROS ::= NUMERO COMA CONJUNTO_NUMEROS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_NUMEROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONJUNTO_NUMEROS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_NUMEROS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTO_LETRAS ::= LETRA COMA CONJUNTO_LETRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_LETRAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONJUNTO_LETRAS ::= LETRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONJUNTO_LETRAS",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESIONES ::= EXPRESION EXPRESIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESIONES ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= IDENTIFICADOR_EXPRESION MENOS MAYOR_QUE DEFINICION_EXPR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IDENTIFICADOR_EXPRESION ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //cambiar A
    id_expresion = a;
    ManipuladorData.listER.add(new classER(a,""+ManipuladorData.conteo_Expresiones+ManipuladorData.conteoAnalisis));
    //verificar su funcionamiento ya que es static
    ManipuladorData.conteo_Expresiones += 1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR_EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DEFINICION_EXPR ::= PUNTO_ER DEFINICION_EXPR DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DEFINICION_EXPR ::= BARRA_VERTICAL_ER DEFINICION_EXPR DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFINICION_EXPR ::= ASTERISCO_ER DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFINICION_EXPR ::= SUMA_ER DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFINICION_EXPR ::= INTERROGACION_ER DEFINICION_EXPR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFINICION_EXPR ::= COMILLA_DOBLE NUMERO COMILLA_DOBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ManipuladorData.listER.get(posER(id_expresion)).insertNodo("valor", a);
        System.out.println(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFINICION_EXPR ::= LLAVE_IZQUIERDA IDENTIFICADOR LLAVE_DERECHA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        ManipuladorData.listER.get(posER(id_expresion)).insertNodo("valor", a);
        System.out.println(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFINICION_EXPR",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PUNTO_ER ::= PUNTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("operacion", ".");
    System.out.println(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PUNTO_ER",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BARRA_VERTICAL_ER ::= BARRA_VERTICAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("operacion", "|");
    System.out.println(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BARRA_VERTICAL_ER",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASTERISCO_ER ::= ASTERISCO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("cerradura", "*");
    System.out.println(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASTERISCO_ER",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUMA_ER ::= SUMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("cerradura", "+");
    System.out.println(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUMA_ER",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INTERROGACION_ER ::= INTERROGACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ManipuladorData.listER.get(posER(id_expresion)).insertNodo("cerradura", "?");
    System.out.println(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERROGACION_ER",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LEXEMAS ::= LEXEMA LEXEMAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LEXEMAS ::= LEXEMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LEXEMA ::= IDENTIFICADOR DOS_PUNTOS COMILLA_DOBLE IDENTIFICADOR COMILLA_DOBLE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LEXEMA ::= IDENTIFICADOR DOS_PUNTOS COMILLA_DOBLE NUMERO COMILLA_DOBLE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LEXEMA ::= IDENTIFICADOR DOS_PUNTOS COMILLA_DOBLE NUMERO_DECIMAL COMILLA_DOBLE PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LEXEMA",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIMBOLO ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SIMBOLO ::= MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIMBOLO ::= ADMIRACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIMBOLO ::= DIAGONAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIMBOLO ::= LLAVE_IZQUIERDA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIMBOLO ::= LLAVE_DERECHA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIMBOLO ::= PORCENTAJE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIMBOLO ::= PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIMBOLO ::= DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIMBOLO ::= PUNTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIMBOLO ::= MENOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIMBOLO ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIMBOLO ::= INTERROGACION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIMBOLO ::= SUMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIMBOLO ::= ASTERISCO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIMBOLO ::= TILDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIMBOLO ::= BARRA_VERTICAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIMBOLO ::= NUMERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIMBOLO ::= DOLAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SIMBOLO ::= AMPERSON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SIMBOLO ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SIMBOLO ::= ARROBA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SIMBOLO ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SIMBOLO ::= COMILLA_SIMPLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SIMBOLO ::= COMILLA_DOBLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SIMBOLO ::= GUION_BAJO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMBOLO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
